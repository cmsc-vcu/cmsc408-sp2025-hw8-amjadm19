---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-amjadm19.git>


# Problem Background
In this assignment we used alot of sql tools to filter through data and create tables. we mainly explored the World Bank WDI country data. It starts by filtering out all the aggregate entries and creating a clean, country‑only table. Next it uses SQL to count countries by region and income group, pivots those results into 2‑D tables with CASE statements, and fixes a misclassified income group. Finally it calculates and shows percentage breakdowns so you can see how countries are spread across income levels.


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_df(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_df(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_df(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_df(cnx,"""
select 
  `Long Name`, `Region`
from
    world_bank_data.wdi_country
where
    region is NULL
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
drop table if exists emp_details_view;
drop table if exists employees;
drop table if exists departments;
drop table if exists jobs;
drop table if exists locations;
drop table if exists countries;
drop table if exists regions;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table wdi_country as
select
  *
from
  world_bank_data.wdi_country
where
  not region is NULL
""")
```

```{python}
# show number of records
run_sql_and_return_df(cnx,"""
select count(*) from wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_df(cnx,"""
select count(*) from wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_df(cnx,"""
select
  `Region`
from
  wdi_country
group by
  `Region`
order by
  `Region`
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_df(cnx,"""
select
  `Region` ,count(*) as "Count"
from
  wdi_country
group by
  `Region`
order by
  `Count` desc
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_df(cnx,"""
select `Long Name`, `Region`
from wdi_country
where `Region`='North America'
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_df(cnx,"""
select `Long Name`, `Region`
from wdi_country
where `Short Name`='Qatar'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_df(cnx,"""
select `Country Code`,`Short Name`, `2-alpha code`, `WB-2 code`, `Region`
from wdi_country
where
`2-alpha code` <> `WB-2 code`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_df(cnx,"""
select `Income Group` from wdi_country
group by `Income Group`
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_df(cnx,"""
select `Short Name`, `Income Group` from wdi_country
where `Income Group` is null
order by
`Short Name`;
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
update
  wdi_country
set
  `Income Group` = 'High income'
where
  `Short Name` = 'Venezuela';
commit;
""")
```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_df(cnx,"""
select `Short Name`,`Income Group` from wdi_country
where
  `Short Name` = 'Venezuela';
""")
```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_df(cnx,"""
select `Region`, `Income Group`, count(*) as "No. of Countries" from wdi_country
group by
  `Region`,
  `Income Group`
order by
  "No. of Countries" desc;
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_df(cnx,"""
select
  `Region`,
  sum(case when `Income Group` = 'High income' then 1 else 0 end) as "High income",
  sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end) as "Upper middle income",
  sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end) as "Lower middle income",
  sum(case when `Income Group` = 'Low income' then 1 else 0 end) as "Low income",
  count(*) as "Row Total"
from
  wdi_country
group by
  `Region`
order by
  `Region`;
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_df(cnx,"""
select
  count(*) as "Low income countries", `Region`, `Income Group` from wdi_country
where
  `Income Group` = 'Low income'
group by
  `Region`,
  `Income Group`
order by
  "Low income countries" desc
limit
  1;
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_df(cnx,"""
select
  `Country Code`,
  `Short Name`,
  `Region`,
  `Income Group`
from
  wdi_country
where
  `Region` = (
    select `Region`
    from wdi_country
    where `Country Code` = 'MHL'
  )
  and `Income Group` = (
    select `Income Group`
    from wdi_country
    where `Country Code` = 'MHL'
  )
order by
  `Short Name`;
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_df(cnx,"""
with
  regs as (
    select distinct
      Region
    from
      wdi_country
  ),
  incs as (
    select distinct
      `Income Group`
    from
      wdi_country
  ),
  combos as (
    select
      r.Region,
      i.`Income Group`
    from
      regs r
      cross join incs i
  ),
  counts as (
    select
      Region,
      `Income Group`,
      count(*) as cnt
    from
      wdi_country
    group by
      Region,
      `Income Group`
  )
select
  c.Region,
  c.`Income Group`
from
  combos c
  left join counts t using (Region, `Income Group`)
where
  t.cnt is null
order by
  c.Region,
  c.`Income Group`;
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_df(cnx,"""
with
  base as (
    select
      `Region`,
      `Income Group`,
      count(*) as country_count
    from
      wdi_country
    group by
      `Region`,
      `Income Group`
  ),
  region_totals as (
    select
      `Region`,
      sum(country_count) as region_total
    from
      base
    group by
      `Region`
  ),
  income_totals as (
    select
      `Income Group`,
      sum(country_count) as income_total
    from
      base
    group by
      `Income Group`
  ),
  grand_total as (
    select
      sum(country_count) as total_countries
    from
      base
  )
select
  b.`Region`,
  b.`Income Group`,
  b.country_count     as "Country Count",
  rt.region_total     as "Region Total",
  it.income_total     as "Income Total",
  gt.total_countries  as "Total Countries",
  round(b.country_count / gt.total_countries * 100, 2) as "Percent of Total"
from
  base b
  join region_totals rt
    on b.`Region` = rt.`Region`
  join income_totals it
    on b.`Income Group` = it.`Income Group`
  cross join grand_total gt
order by
  b.`Region`,
  b.`Income Group`;
""")
```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_df(cnx,"""
select
  `Region`,
  round(
    sum(case when `Income Group` = 'High income' then 1 else 0 end)
    / (select count(*) from wdi_country) * 100
  , 2) as "High income",
  round(
    sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end)
    / (select count(*) from wdi_country) * 100
  , 2) as "Upper middle income",
  round(
    sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end)
    / (select count(*) from wdi_country) * 100
  , 2) as "Lower middle income",
  round(
    sum(case when `Income Group` = 'Low income' then 1 else 0 end)
    / (select count(*) from wdi_country) * 100
  , 2) as "Low income",
  round(
    sum(case when `Income Group` is null then 1 else 0 end)
    / (select count(*) from wdi_country) * 100
  , 2) as "No income",
  round(
    count(*) / (select count(*) from wdi_country) * 100
  , 2) as "Row Total"
from
  wdi_country
group by
  `Region`
order by
  `Region`;
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_df(cnx,"""
with
  base as (
    select
      `Region`,
      `Income Group`,
      count(*) as country_count
    from
      wdi_country
    group by
      `Region`,
      `Income Group`
  ),
  income_totals as (
    select
      `Income Group`,
      sum(country_count) as income_total
    from
      base
    group by
      `Income Group`
  ),
  grand_total as (
    select
      sum(income_total) as total_countries
    from
      income_totals
  )
select
  it.`Income Group`,
  it.income_total as "Number of Countries",
  gt.total_countries as "Total Countries",
  round(it.income_total / gt.total_countries * 100, 2) as "Percent of Total"
from
  income_totals it
  cross join grand_total gt
order by
  it.income_total desc;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

Okay so this assignment was for sure so sql heavy, and having to understand sql/the correct commands to use and everything like that. The one thing I feel alot more confident is not my sql coding skills, but being able to break down why my code isn't working. The only reason I was able to understand what I was doing wrong or where I went wrong or how to break things up into parts was because of the professors lectures. When something doesn't work for him he starts to narrow down the options and I try and do the same. That overall helped build my confindence throughout the assignment because I could see myself slowly understanding everything.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

So like I mentioned in the previous question the professor of course helped alot in the break down problems. Him doing the first 12 problems gave me a better understanding of how I should approach the problems afterwards. Every question was easy until 18-21 I struggled alot with them. I had to use chatgpt alot to even get something spit out to me because at the end there was so many things going together that it was hard understand where an issue could come up so having chatgpt find the bug was easier. Overall I would just use my resources a little more like discord, prof, and friends. 


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

My favorite part about this assignment was how we were using actual data, and that gave me a better understanding of how powerful sql can really be and how much data can give you the smallest of details. Like for example how I was able to see Qatar for one of the answers or like What country had what kind of income. With sql it makes it so much more easier to handle data and then use it to find bigger things which I think is pretty cool. I also liked how I could even change the database there wasn't correct data given.


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

